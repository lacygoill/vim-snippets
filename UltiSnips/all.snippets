snippet { "my automatic curly brackets" m
$1 $2($3){
	$0
}
endsnippet

global !p
from snippetHelpers import *
endglobal

# en dash{{{
#
# https://english.stackexchange.com/a/2126/313834
# https://en.wikipedia.org/wiki/Dash#En_dash
# https://en.wikipedia.org/wiki/Dash#En_dash_versus_em_dash
# https://en.wikipedia.org/wiki/Whitespace_character#Hair_spaces_around_dashes
# https://tex.stackexchange.com/a/60038/169646
#}}}
# Why don't you use an abbreviation?{{{
#
# Because, for some reason, Vim often fails to expand it.
# Besides, the abbreviation – as printed in the mappings table – is weird:
#
#     :inorea ndh – –<left><left>
#     :inorea ndh
#     i  ndh         *  <Left><Left>~
#                       ├──────────┘
#                       └ where are the en dashes?
#
# ---
#
# In the future, if  you find a way to make the  abbreviation more reliable, and
# want  to use  it, don't  write `nd`  as the  lhs; it's  too often  expanded by
# accident.
#}}}
# Don't forget we also have a sandwich!{{{
#
# It's defined in `~/.vim/after/plugin/sandwich.vim`.
# If you need to surround a text with en dashes, visually select it, and press `sad`.
# It also supports text-objects/motions (e.g. press `sa$d` to surround until the
# end of the line).
#}}}
snippet nd "en dash"
– $0 –
endsnippet

# macro {{{1

# Usage:{{{
#
# When you need to build and replay a macro, source the first 2 lines.
# When you're done replaying the macro, source the 3rd line.
#}}}
# Why the indentation?{{{
#
# It's useful in a markdown buffer, to prevent the weird string of characters in
# the macro to mess up the syntax highlighting.
#}}}
snippet macro "" bm
	call setreg('q', {})
	nno <buffer> <cr> @q
	nunmap <buffer> <cr>
$0
endsnippet

# tb {{{1

pre_expand "create_table(snip)"
snippet "tb\d+x\d+" "Customizable table" br
endsnippet

# why {{{1

pre_expand "why(snip)"
snippet why "FAQ-like question in a comment" bm
endsnippet

