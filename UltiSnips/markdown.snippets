global !p
from snippet_helpers import *
endglobal

snippet ex "example" bm
\$ $1`!p snip.rv = complete(t[1], ['seq 3', "printf '%s\\n' a b c"])` | sed '$0'
endsnippet

# bug_tmux {{{1

# My backtrace doesn't contain any useful info!  Help!{{{
#
# Ok, so you've got sth like this:
#
#     #0  0x0000000000414fe6 in ?? ()
#      No symbol table info available.
#     #1  0x0000000000410787 in ?? ()
#      No symbol table info available.
#     #2  0x0000000000000000 in ?? ()
#      No symbol table info available.
#
# It's probably because you didn't use  the same tmux binary when you reproduced
# the crash, and when you run `$ gdb` to extract a backtrace from the core.
#
# Make sure to use the same binary.
# That is, do *not* do that:
#
#     $ ./tmux -Ltest -f/dev/null new
#       ^^^^^^
#
#     $ gdb -n -ex 'thread apply all bt full' -batch tmux core >backtrace.txt
#                                                    ^^^^
#
# In  the first  command,  where you  reproduce the  crash,  you're calling  the
# compiled binary in the current directory.
# While  in  the  second  command,  you're calling  the  installed  tmux  binary
# `/usr/local/bin/tmux`.
#
# Choose one or the other, but don't mix the two.
#}}}
# Replace the `tmux-xxx-PID.log` lines with the links to the actual files.{{{
#
# To do so, open a GUI file manager, and drag-and-drop the file into the issue;
#
# GitHub will  automatically upload your file,  create a link, and  name it with
# the original filename.
#
# Don't close the file manager until the link has been generated.
#}}}
# How to recompile tmux, during a bisecting?{{{
#
#     $ sudo make clean ; sudo make distclean ; sudo sh autogen.sh && sudo ./configure && sudo make
#}}}
snippet bug_tmux "filing bug report for tmux" bm
 - \`$ tmux -V\`: `tmux -V`
 - \`$ uname -sp\`: `uname -sp`
 - terminal: st
 - \`$TERM\` outside tmux: ${1:st-256color}
 - \`$TERM\` inside tmux: `echo $TERM`
 - logs from \`$ tmux -vv -L test -f /tmp/tmux.conf new\`:
   tmux-client-PID.log
   tmux-out-PID.log
   tmux-server-PID.log${3:
 - \`$ gdb -n -ex 'thread apply all bt full' -batch tmux ./core\`: [backtrace.txt](${2:url})}${6:
 - \`$ git bisect\`: [\`${4:1234567}\`](${5:url})}
$0
endsnippet

# bug_vim {{{1

snippet bug_vim "filing bug report for (N)Vim" bm
 - \``!v
    has('nvim') ? 'n' : ''
`vim --version\`:        `!v
substitute(join(split(execute('version'), '\n')[0:1]), '(.\{-})', '', '')
`
`!v
    !has('nvim') ? '' : ' - Vim (version: ) behaves differently?
'` - Operating system:     `!v
    matchstr(system('lsb_release -d'), 'Description:\s*\zs.*')[:-2]
`
 - Terminal emulator:    `!v systemlist('st -v')[0]``!v
    !empty($TMUX) ? '
 - Terminal multiplexer: '.systemlist('tmux -V')[0] : ''
`
 - \`$TERM\`:                `echo $TERM`
 - Shell:                `!v
    systemlist('zsh --version')[0]
`
$0
endsnippet

# details {{{1

# Source:{{{
#
#    https://www.w3schools.com/tags/tag_details.asp
#    https://stackoverflow.com/a/33033172/8243465
#    https://github.com/dear-github/dear-github/issues/166#issuecomment-252282315
#}}}
# If you  want your  answer the hidden  text to contain  a codeblock,  insert an
# empty line right below `<summary>`.
snippet details "view or hide text on demand" bm
<details><summary>
${1:answer:}</summary>

${0:${VISUAL}}
</details>
endsnippet

# eof {{{1

snippet eof "" Abm
$ cat <<'EOF' >${2:/tmp/${1:file}}
${0:${VISUAL}}
EOF
endsnippet

# note {{{1

# Kept for educational purpose.
# It shows how to use `snip.opt(var, default)`:
#
#     snip.opt(var, default)
#
#         Checks if the  Vim variable 'var' has been set. If  so, it returns the
#         variable's value; otherwise, it returns the value of 'default'.

# snippet note "NOTE header" m
# `!p snip.rv = ' ' * int((int(snip.opt('&l:tw', 0))/2 - 3))`NOTE:

# $0
# endsnippet

# wpm {{{1

# Kept for educational purpose.
# It shows:
#
#    - how to access the contents of a tabstop (`t[1]`, `t[2]`)
#
#    - we can use any python function (ex: `float()`)
#
#    - newlines inside an interpolation are ignored;
#      allow to write the code on several lines to make it more readable
#
#    - creating a tabstop for an unpredictable information MAY be suboptimal
#
#      For example, here, we don't know in advance the average speed, so we
#      could be tempted to create a tabstop. But the average speed is not
#      a fundamental information. It derives from 2 other info.
#      So, it's best to write an interpolation to compute it.

# snippet wpm "average speed" bm
# I typed ${1:750} words in ${2:30} minutes; my speed is `!p
# snip.rv = float(t[1]) / float(t[2])
# ` words per minute
# endsnippet
