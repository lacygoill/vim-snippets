global !p
from snippet_helpers import *
endglobal

snippet ex "example" bm
\$ $1`!p snip.rv = complete(t[1], ['seq 3', "printf '%s\\n' a b c"])` | sed '$0'
endsnippet

# bug_tmux {{{1

# Replace the `tmux-xxx-PID.log` lines with the links to the actual files.{{{
#
# To do so, open a GUI file manager, and drag-and-drop the file into the issue;
#
# GitHub will  automatically upload your file,  create a link, and  name it with
# the original filename.
#
# Don't close the file manager until the link has been generated.
#}}}
snippet bug_tmux "filing bug report for tmux" bm
### Issue description

To reproduce, run these shell commands:

	$ tmux -Lx -f/dev/null

### Required information

 - \`$ tmux -V\`: `tmux -V`
 - \`$ uname -sp\`: `uname -sp`
 - terminal: xterm
 - \`$TERM\` outside tmux: ${1:xterm-256color}
 - \`$TERM\` inside tmux: ${2:screen}
 - logs from \`$ tmux -vv -Lx -f/dev/null\`:
 ${3:- backtrace from \`$ gdb -n -ex 'thread apply all bt full' -batch ./tmux ./core\`: [backtrace.txt](${2:url})}${6:
 - possible offending commit(s) from \`$ git bisect\`: [\`${4:1234567}\`](${5:url})}
$0
endsnippet

# bug_vim {{{1

snippet bug_vim "filing bug report for Nvim" bm
**Describe the bug**

**To Reproduce**

1. Run \`vim --clean\` (or \`gvim --clean\`, etc.)
2. Edit \`filename\`
3. Type '....'
4. Describe the error

**Expected behavior**

${1:**Screenshots**

}**Environment**
 - \`vim --version\`: `!v
substitute(join(split(execute('version'), '\n')[0:1]), '(.\{-})', '', '')`
 - OS: `!v
	matchstr(system('lsb_release -d'), 'Description:\s*\zs.*')[:-2]`
 - Terminal: st
${2:
**Additional context**}
$0
endsnippet

# bug_nvim {{{1

snippet bug_nvim "filing bug report for Nvim" bm
 - \`nvim --version\`:        `!v
substitute(join(split(execute('version'), '\n')[0:1]), '(.\{-})', '', '')
`
 - Vim (version: `!v
system('vim --version | sed -n "1s/VIM - Vi IMproved\|(.*//gp ; 2p" | tr -d "\n"')
`) behaves differently? ${1:Yes}
 - Operating system:     `!v
    matchstr(system('lsb_release -d'), 'Description:\s*\zs.*')[:-2]
`
 - Terminal emulator:    `!v systemlist('st -v')[0]``!v
    !empty($TMUX) ? '
 - Terminal multiplexer: '.systemlist('tmux -V')[0] : ''
`
 - \`$TERM\`:                `echo $TERM`
 - Shell:                `!v
    systemlist('zsh --version')[0]
`

### Steps to reproduce using \`nvim -u NORC\`

	nvim -u NORC

### Actual behaviour

### Expected behaviour
$0
endsnippet

# details {{{1

# Source:{{{
#
#    https://www.w3schools.com/tags/tag_details.asp
#    https://stackoverflow.com/a/33033172/8243465
#    https://github.com/dear-github/dear-github/issues/166#issuecomment-252282315
#}}}
# If you  want your  answer the hidden  text to contain  a codeblock,  insert an
# empty line right below `<summary>`.
snippet details "view or hide text on demand" bm
<details><summary>
${1:answer:}</summary>

${0:${VISUAL}}
</details>
endsnippet

# eof {{{1

snippet eof "" Abm
$ cat <<'EOF' >${2:/tmp/${1:file}}
${0:${VISUAL}}
EOF
endsnippet

# note {{{1

# Kept for educational purpose.
# It shows how to use `snip.opt(var, default)`:
#
#     snip.opt(var, default)
#
#         Checks if the  Vim variable 'var' has been set. If  so, it returns the
#         variable's value; otherwise, it returns the value of 'default'.

# snippet note "NOTE header" m
# `!p snip.rv = ' ' * int((int(snip.opt('&l:tw', 0))/2 - 3))`NOTE:

# $0
# endsnippet

# wpm {{{1

# Kept for educational purpose.
# It shows:
#
#    - how to access the contents of a tabstop (`t[1]`, `t[2]`)
#
#    - we can use any python function (ex: `float()`)
#
#    - newlines inside an interpolation are ignored;
#      allow to write the code on several lines to make it more readable
#
#    - creating a tabstop for an unpredictable information MAY be suboptimal
#
#      For example, here, we don't know in advance the average speed, so we
#      could be tempted to create a tabstop. But the average speed is not
#      a fundamental information. It derives from 2 other info.
#      So, it's best to write an interpolation to compute it.

# snippet wpm "average speed" bm
# I typed ${1:750} words in ${2:30} minutes; my speed is `!p
# snip.rv = float(t[1]) / float(t[2])
# ` words per minute
# endsnippet
