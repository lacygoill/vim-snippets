# To document:{{{
#
#         `vim.current.window.cursor[0]` can be used to access the line number.
#         Is it equivalent to `snip.line`, or is there an offset?
#
#         `post_expand`  works only  if the  first  tabstop is  right after  the
#         tab_trigger of the second snippet.
#
#         `post_jump` works  on the  condition that the  first tabstop  is right
#         after the tab_trigger  of the second snippet, and you  test the number
#         of the tabstop before trying to expand the snippet:
#
#                 post_jump "if snip.tabstop == 1: vim.eval('feedkeys(\"\<c-r>=UltiSnips#ExpandSnippet()\<cr>\")')"
#                            ├──────────────────┘
#                            └ check we're on the first tabstop,
#                              because we've positioned the tab_trigger
#                              right before
#
#         You could position the tab_trigger of the second snippet before any
#         tabstop, not just the first one, but then its expansion wouldn't be
#         completely automatic. You would have to jump to it.
#         There's no need for that with the first tabstop, because UltiSnips
#         automatically jumps to the first tabstop after expanding a snippet.
#}}}
snippet pr "print debug"
printf -- 'XXXXXX `!p
snip.rv = "{}:{}: {}".format(
	os.path.basename(vim.current.window.buffer.name),
	str(vim.current.window.cursor[0]),
	t[1] + ": %q\\n' "
)
`$1 >&2
endsnippet

# post_jump "if snip.tabstop == 2: vim.eval('feedkeys(\"\<c-r>=UltiSnips#ExpandSnippet()\<cr>\")')"
post_expand "vim.eval('feedkeys(\"\<c-r>=UltiSnips#ExpandSnippet()\<cr>\")')"
snippet pd "Description" b
pr$1 >${2:/tmp/debug}
endsnippet



# #! {{{1

snippet #! "bash shebang" bm
#!/bin/bash
endsnippet

# Executing bash via:
#
#         #!/usr/bin/env bash
#
# … would make scripts more portable, but the Shell Style Guide from Google
# recommends to use `#!/bin/bash`, because it's more secure.
# We know exactly which binary is going to be executed.
# `#!/usr/bin/env bash` could execute another `bash` binary from a directory
# in the `PATH`, one which would be before `/bin/`.

# $ {{{1

snippet $ "value of var in assigment" i
"${$0}"
endsnippet

# case {{{1

snippet case "case condition" bm
case ${1:my_var} in
	${2:val1})
		${3:action 1}
		;;
	${3:val2})
		${4:action 2}
		;;
	${5:val3})
		${6:action3}
		exit 1
		;;
	*)
		${0:final action}
esac
endsnippet

# elvi {{{1

snippet elvi "Template to create a custom elvi for surfraw" bm
#!/bin/sh
#
# elvis: ${1:name of the site} 	-- Search ${2:what} using $1 (${3:url of the main page})
. surfraw || exit 1

w3_usage_hook () {
	cat <<EOF >&2
Usage: $w3_argv0 [options] [search words]...
Description:
	Search $2 using $1 ($3)
EOF
	w3_global_usage
}

w3_config
w3_parse_args "$@"
if test -z "$w3_args"; then
	w3_browse_url "$3"
else
	escaped_args=\`w3_url_of_arg $w3_args\`
	w3_browse_url "${4:url to search a keyword}${escaped_args}"
fi
endsnippet

# eof {{{1

post_expand "snip.buffer[snip.line + 2] = 'EOF'"
snippet eof "here document" Abm
cat <<EOF${1: >&2}
$0

endsnippet

# for {{{1

snippet for "for ... in ... done" bm
for ${1:i} in ${2:words}; do
	${0:${VISUAL}}
done
endsnippet

# fu {{{1

snippet fu "function" bm
${1:my_func}() {
	${0:${VISUAL}}
}
endsnippet

# http://mywiki.wooledge.org/BashPitfalls#function_foo.28.29
#
#     foo() { … ; }             ✔ more portable
#     function foo { … ; }      ✔ resists to alias collision (alias foo=…)
#     function foo() { … ; }    ✘

# guard_root {{{1

# https://stackoverflow.com/a/18216122/8243465
# Why the `PATH=$PATH`?{{{
#
# To make sure that `~/bin` is in root's PATH.
#}}}
snippet gd_root "check we've enough rights to run script" bm
if [[ "${EUID}" -ne 0 ]]; then
  cat <<EOF >&2
Please run as root${2::
sudo -E PATH="\\$PATH" bash -c '$1'}
EOF
  exit 1
fi
$0
endsnippet

# if {{{1

snippet if "if statement" bm
if [[ $1 ]]; then
	${2:${VISUAL}}
${4:${3:else}
	$0
}fi
endsnippet

snippet i "elseif" "snip.last_placeholder and snip.last_placeholder.current_text == 'else'" Ae
elif $1
	$2
${3:else}
endsnippet

# logging {{{1

# Alternative:{{{
#
#     snippet log "log output of script" bm
#
#     # log messages
#     exec 3>&1 4>&2
#     [[ -d "${HOME}/log" ]] || mkdir "${HOME}/log"
#     LOGFILE="${HOME}/log/"$(basename "\$0" .sh)".log"
#     exec 1> 2>&1
#
#     # show the log in a tmux pane
#     if [[ -n "${TMUX}" ]]; then
#       pane_id="$(tmux split-window -c /tmp -d -v -p 50 -PF "#D" tail -f "${LOGFILE}")"
#     fi
#
#     # do your stuff here
#     $0
#
#     # close the tmux pane
#     if [[ -n "${TMUX}" ]]; then
#       tmux kill-pane -t "${pane_id}"
#     fi
#
#     endsnippet
#
# Much more complex. Maybe more powerful.
#}}}
post_expand "snip.buffer[snip.line + 7] = 'EOF'"
snippet log "log output of script" bm
[[ -d "${HOME}/log" ]] || mkdir "${HOME}/log"
LOGFILE="${HOME}/log/"$(basename "\$0" .sh)".log"
cat <<EOF
-----------
$(date +%m-%d\ %H:%M)
-----------


${2:main${1: "\$1"}} 2>&1 | tee -a "${LOGFILE}"
$0
endsnippet

# Is it necessary to quote `$(basename ...)`?{{{
#
# When a command substitution is used after a command, it needs to be quoted.
# But here, it's used in an assignment; there's no leading command.
# So, quoting is useless:
#
#	  https://unix.stackexchange.com/a/118438/289772
#
# However, we should stay consistent, and always quote a command substitution.
#}}}

# rgx_comp {{{1

snippet rgx_comp "test if pattern match string" bm
case "${1:string}" in
	${2:pat1|pat2}) $3 ;;
	*) $4 ;;
esac
endsnippet
# This syntax doesn't seem to handle complex regexes, but is POSIX, contrary to:
#     [[ "string" == "pattern" ]]
#
# For other valid syntaxes:
# https://stackoverflow.com/questions/21115121/how-to-check-pattern-match-by-using-bin-sh-not-by-bin-bash

# select {{{1

snippet select "select instruction" bm
printf -- "\n${1:Which action do you want to perform?}\n\n"

select ${2:action} in ${3:list of values}; do
	$0
done
endsnippet

# tc {{{1

# https://stackoverflow.com/a/677212/9780968
# Explanation of the command:{{{
#
#                   ┌ execute silently
#                   ├─────────────┐
#     command -v $1 >/dev/null 2>&1 || { printf -- "I require '$1' but it's not installed.  Aborting." >&2; exit 1; }
#
# The `>&2` token sends the next message on standard error.
#
# In practice, it will still be displayed on the terminal because standard error
# is connected to the latter by default.
#
# But, by convention, any error message  should be sent specifically to standard
# error.
#}}}
snippet tc "Test whether Command exists" bm
command -v $1 >/dev/null 2>&1 || { printf -- "I require '$1' but it's not installed.  Aborting." >&2; exit 1; }
endsnippet

# tmp {{{1

snippet tmp "create temporary file" bm
TMP="$(mktemp /tmp/.${1:pgm}.XXXXXXXXXX)"
$0
rm "${TMP}"
endsnippet
