global !p
from snippetHelpers import *
endglobal

# #! {{{1

# cannot use /usr/bin/env because it does not support parameters (as -f)
snippet #! "awk shebang" bm
#!/usr/bin/awk -f
endsnippet

# digits regex {{{1

snippet \d "digits regex" i
[0-9]
endsnippet

# do {{{1

snippet do "do ... while" m
do {
	$0
} while ($1)
endsnippet

# for {{{1

snippet ff "for" Am
for (${1:i} = ${2:1}; $1 <= ${3:n}; ${4:$1++})${5: \{}
	${0:${VISUAL}}
${5/.+/\}/}
endsnippet

# for ... in {{{1

snippet fii "for in" Am
for (${1:i} in ${2:array})${3: \{}
	$0
${3/.+/\}/}
endsnippet

# function {{{1

snippet fu "function" bm
function ${1:myfunc}($2) {
	${0:${VISUAL}}
	return
}
endsnippet

# guard {{{1

snippet gd "prevent infinite loop or recursion" Am
if (g > 999)
	$1`!p snip.rv = complete(t[1], ['break', 'return'])`
++g
endsnippet

# Do not initialize `g` to 1, and, do not make `g` a local variable.
#
# It would  prevent the  guard from  working with a  recursive function  (i.e. a
# function which calls itself).
#
# If you  want to check  whether you're trapped inside  an infinite loop,  add a
# `print g` statement, somewhere in your code.
#
# The statement  to go out of  a function is `return`,  but to go out  of a loop
# it's `break`.

# if {{{1

snippet ii "if {...}" Am
if ($1)${2: \{}
	${3:${VISUAL}}
${2/.+/\} /}${7:${4:else}${5: \{}
	$6
${5/.+/\}/}}
$0
endsnippet

context "snip.last_placeholder and snip.last_placeholder.current_text == 'else'"
snippet e "if ... else ..." Am
else if ($1)${2: \{}
	$3
${2/.+/\} /}${4:else}
endsnippet

# is number {{{1

snippet isnum "test if n is a number" bm
function isnum(n) {
	${1:return n ~ /^[+-]?[0-9]+$/}
	${2:sign = "[-+]?"
	decimal = "[0-9]+[.]?[0-9]*"
	fraction = "[.][0-9]+"
	exponent = "[eE]" sign "[0-9]+"
	number = "^" sign "(" decimal "|" fraction ")(" exponent ")?$"

	return n ~ number}
}
$0
endsnippet

# print {{{1

snippet pr "print" m
	print ${1:"$2"}$0
endsnippet

# Also works when we reverse the order of the tabstops:
#
#     print ${2:"$1"}$0
#
# In this case, we end up directly inside the quotes, then after pressing tab,
# we select the whole string.

# rule {{{1

snippet rr "rule" Abm
$1`!p snip.rv = complete(t[1], ['BEGIN ', 'END ', '/pat/ '])`{ ${2:action} }
endsnippet

# shell output {{{1

snippet shout "capture output of shell command" m
"${1:cmd}" | getline ${2:var}
close("$1")
endsnippet

# sort array {{{1

snippet sort_array "sort array" m
for (${1:i} in ${2:array})
	print $2[$1] | "sort${5:${3: -nr}${4: >/tmp/file}}"
close("sort$5")
$0
endsnippet

# switch {{{1

# the switch statement is a gawk extension
snippet sww "switch" Am
switch ($1) {
case $2:
	$3
	break
default:
	$0
	break
}
endsnippet

# the `case` statement is part of the `switch` one
snippet cc "case" Am
	case $1:
		$0
		break
endsnippet

# test function {{{1

snippet test_func "test custom function" bm
{ printf("%${2:-10}s %${3:20}s\n", \$0, ${1:myfunc}(\$0)) }
function $1(${4:x}) {
	${0:${VISUAL}}
	return
}
endsnippet

# test pattern {{{1

snippet test_pattern "test pattern" bm
match(\$0, ${1:/pattern/}, match_array) { print match_array[0]; next }
{ print "no match" }
$0
endsnippet

# while {{{1

snippet ww "while" Am
while ($1) {
	$2
}
$0
endsnippet

