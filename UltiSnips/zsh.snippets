# Enable snippets from `sh` filetype
extends sh

# function {{{1

snippet fu "function definition" Abm
${1:func}() {
	emulate -L zsh
	${0:${VISUAL}}
}
endsnippet

# syntax highlighting {{{1

snippet syn_hi "syntax highlighting" bm
: ${ZSH_HIGHLIGHT_STYLES[${1:my_highlighter}:${2:my_style}]:=${3:fg=red,bold}}

_zsh_highlight_highlighter_$1_predicate() {
	${4:# condition for our highlighter to be active}
}

_zsh_highlight_highlighter_$1_paint() {
	_zsh_highlight_add_highlight ${5:0} ${6:$#BUFFER} $1:$2
}
endsnippet

# $1 = name of our highlighter (arbitrary)
#    = prefix of the name of the current script file (ex: git-highlighter.zsh)
#    = name of the directory of the script
#
# $2 = name of our style (arbitrary)
# $3 = value of our style
# $4 = condition for our highlighter to be active; ex:    [[ -d .git ]]
#                                                         being in a git repo
# $5 = beginning of the region to highlight
# $6 = end       "

# vim + heredoc {{{1

# Useful after pressing `C-x C-e`.{{{
#
# Suppose you've copied some code from a Vim bug report.
# To test it, you can:
#
#    - press `C-x C-e`
#    - put the clipboard
#    - visually select the code
#    - press `Tab`
#    - insert `vhd`
#    - press `Tab`
#    - press `Esc` + `ZZ`
#}}}
context "vim.eval('expand(\"%:t\") =~# \"^zsh\\\w*$\" ? v:true : v:false')"
snippet vhd "vim + heredoc" bm
vim -Nu NONE -S <(cat <<'EOF'
${0:${VISUAL}}
EOF
)
endsnippet
